#version 450

struct Particle
{
	vec4 position;
	vec4 velocity;
};

layout(std140, binding = 0) buffer Vertex 
{
	Particle particles[ ];
} inVertex;

layout (binding = 1) uniform ParticleParam 
{
	vec4 data0;
	vec4 data1;
} param;

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

void main() 
{
    uint globalIndex = gl_WorkGroupID.z * gl_NumWorkGroups.x * gl_NumWorkGroups.y + gl_WorkGroupID.y * gl_NumWorkGroups.x + gl_WorkGroupID.x;
	globalIndex = globalIndex * gl_WorkGroupSize.x * gl_WorkGroupSize.y * gl_WorkGroupSize.z;
	globalIndex = globalIndex + gl_LocalInvocationIndex;

	if (globalIndex >= param.data0.w) {
		return;
	}

	vec2 vPos = inVertex.particles[globalIndex].position.xy;
	vec2 vVel = inVertex.particles[globalIndex].velocity.xy;
	vec2 vDst = param.data0.xy - vPos;
	vVel  = vDst;
	vPos += vVel;

	if (vPos.x < -1.0 || vPos.x > 1.0 || vPos.y < -1.0 || vPos.y > 1.0) {
		vVel = -vVel;
	}
	else {
		inVertex.particles[globalIndex].position.xy = vPos;
	}

	inVertex.particles[globalIndex].position.z += 0.01 * param.data0.z;
	if (inVertex.particles[globalIndex].position.z > 1.0) {
		inVertex.particles[globalIndex].position.z = 0.0;
	}

	inVertex.particles[globalIndex].velocity.xy = vVel;
}