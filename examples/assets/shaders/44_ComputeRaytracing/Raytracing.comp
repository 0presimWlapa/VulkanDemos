#version 450

#define MAXLEN 				1000.0
#define RAYBOUNCES 			10
#define REFLECTIONSTRENGTH 	0.4
#define REFLECTIONFALLOFF 	0.5

layout (local_size_x = 16, local_size_y = 16) in;

layout (binding = 1, rgba8) uniform writeonly image2D outputImage;

layout(std140, binding = 2) buffer SceneBuffer 
{
	vec4 datas[];
} inSceneData;

struct Material
{
	vec4 ambientColor;
	vec4 diffuseColor;
	vec4 specularColor;
	vec4 reflectedColor;
	vec4 refractedColor;
	vec4 refractiveIndex;
};

layout (binding = 0) uniform RaytracingParamBlock
{
	vec4 		lightPos;
	vec4 		cameraPos;
	mat4 		invProjection;
	mat4 		invView;
	Material	materials[10];
} uboParam;

struct HitInfo
{
	vec3 	position;
	float 	dist;
	vec3 	normal;
	bool 	inside;
};

float Attenuation(float range, float d)
{
    return 1.0 - smoothstep(range * 0.75, range, d);
}

vec4 Lighting(vec3 pos, vec3 ray, vec3 normal, HitInfo hitInfo, Material material)
{
	vec3 lightDir = normalize(uboParam.lightPos.xyz  - hitInfo.position);
	vec3 eyeDir   = normalize(uboParam.cameraPos.xyz - hitInfo.position);

	vec3 color = vec3(0, 0, 0);
	// diffuse
	color += material.diffuseColor.xyz * max(dot(hitInfo.normal, lightDir), 0.0);
	// specular
	vec3 reflected = normalize(reflect(-lightDir, hitInfo.normal));
	color += material.specularColor.xyz * pow(max(dot(reflected, eyeDir), 0.0), material.specularColor.w);
	// attenuation
	color *= Attenuation(uboParam.lightPos.w, length(hitInfo.position - pos));
	// ambient
	color += material.ambientColor.xyz;

	return vec4(0, 0, 0, 0);
}

bool IntersectTriangle(vec3 orig, vec3 dir, vec3 v0, vec3 v1, vec3 v2, inout HitInfo hitInfo)
{
	float t = 0;
	float u = 0;
	float v = 0;

	vec3 edge1 = v1 - v0;
	vec3 edge2 = v2 - v0;
	vec3 pvec  = cross(dir, edge2);
	float det  = dot(edge1, pvec);

	vec3 tvec;
	if (det > 0) {
		tvec = orig - v0;
	}
	else {
		tvec = v0 - orig;
		det  = -det;
	}

	if (det < 0.0001) {
		return false;
	}

	u = dot(tvec, pvec);
	if (u < 0.0 || u > det) {
		return false;
	}

	vec3 qvec = cross(tvec,edge1);
	v = dot(dir, qvec);
	if (v < 0.0 || u + v > det) {
		return false;
	}

	t = dot(edge2, qvec);

	float fInvDet = 1.0 / det;
	t *= fInvDet;
	u *= fInvDet;
	v *= fInvDet;

	hitInfo.position = orig + dir * t;
	hitInfo.dist     = t;
	hitInfo.normal   = normalize(cross(edge1, edge2));
	hitInfo.inside   = dot(hitInfo.normal, dir) > 0;

	return true;
}

int HitScene(in vec3 pos, in vec3 ray, inout HitInfo hitInfo)
{
	int id  = -1;
	float t = MAXLEN;

	HitInfo tempInfo;

	// first element store object size
	int count  = int(inSceneData.datas[0].x);
	int index  = 1;

	for (int i = 0; i < count; ++i)
	{
		ivec4 head = ivec4(inSceneData.datas[index]);

		int meshID = head.x;
		int geomID = head.y;
		int verNum = head.z;
		int idxNum = head.w;

		// offset to mesh data
		index += 1;

		// indices
		for (int j = 0; j < idxNum; ++j)
		{
			ivec4 idx = ivec4(inSceneData.datas[index + j]);

			vec4 v0 = inSceneData.datas[index + idxNum + idx.x];
			vec4 v1 = inSceneData.datas[index + idxNum + idx.y];
			vec4 v2 = inSceneData.datas[index + idxNum + idx.z];

			// hit test
			if (IntersectTriangle(pos, ray, v0.xyz, v1.xyz, v2.xyz, tempInfo))
			{
				if (tempInfo.dist < t && !tempInfo.inside)
				{
					id = meshID;
					t  = tempInfo.dist;

					hitInfo.position = tempInfo.position;
					hitInfo.dist     = tempInfo.dist;
					hitInfo.normal   = tempInfo.normal;
					hitInfo.inside   = tempInfo.inside;
				}
			}
		}

		// offset to next object
		index += idxNum;
		index += verNum;
	}

	return id;
}

vec4 RenderScene(inout vec3 pos, inout vec3 ray, inout int id)
{
	vec4 color = vec4(0, 0, 0, 0);
	HitInfo hitInfo;

	int objectID = HitScene(pos, ray, hitInfo);
	if (objectID == -1) {
		return color;
	}
	
	vec3 position  = pos + ray * hitInfo.dist;
	vec3 lightDir  = normalize(uboParam.lightPos.xyz - position);				
	float diffuse  = clamp(dot(hitInfo.normal, lightDir), 0.0, 1.0);
	color = diffuse * vec4(1, 1, 1, 1);
	
	if (id == -1) {
		return color;
	}

	id  = objectID;
	ray = reflect(ray, hitInfo.normal);
	pos = position;	
	
	return color;
}

void main()
{	
	ivec2 dim = imageSize(outputImage);
	vec2 uv   = vec2(gl_GlobalInvocationID.xy) / dim;

	vec3 pos = uboParam.cameraPos.xyz;
	vec3 ray = vec3(uv.x * 2.0 - 1.0, -(uv.y * 2.0 - 1.0), 1.0);
	
	ray   = (uboParam.invProjection * vec4(ray, 1.0)).xyz;
	ray.x = ray.x * ray.z;
	ray.y = ray.y * ray.z;

	ray.xyz = (uboParam.invView * vec4(ray, 0.0)).xyz;
	ray.xyz = normalize(ray.xyz);
	
	// Basic color path
	int id = 0;
	vec4 finalColor = RenderScene(pos, ray, id);
	
	// Reflection
#if 0
	float reflectionStrength = REFLECTIONSTRENGTH;
	for (int i = 0; i < RAYBOUNCES; ++i)
	{
		vec4 reflectionColor = RenderScene(pos, ray, id);
		finalColor = (1.0 - reflectionStrength) * finalColor + reflectionStrength * mix(reflectionColor, finalColor, 1.0 - reflectionStrength);			
		reflectionStrength *= REFLECTIONFALLOFF;
	}
#endif
	
	imageStore(outputImage, ivec2(gl_GlobalInvocationID.xy), finalColor);
}