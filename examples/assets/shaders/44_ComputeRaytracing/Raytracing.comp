/*
* Vulkan Example - Compute shader ray tracing
*
* Copyright (C) 2016 by Sascha Willems - www.saschawillems.de
*
* This code is licensed under the MIT license (MIT) (http://opensource.org/licenses/MIT)
*/


#version 450

layout (local_size_x = 16, local_size_y = 16) in;

layout (binding = 1, rgba8) uniform writeonly image2D outputImage;

#define EPSILON 			0.0001
#define MAXLEN 				1000.0
#define SHADOW 				0.5
#define RAYBOUNCES 			10
#define REFLECTIONS 		1
#define REFLECTIONSTRENGTH 	0.4
#define REFLECTIONFALLOFF 	0.5

struct Sphere
{
	vec4  position; // position + radius
	vec4  diffuse;  // diffuse + specular
	ivec4 id;       // id + padding
};

struct Plane
{
	vec4  normal;  // normal + distance
	vec4  diffuse; // diffuse + specular
	ivec4 id;      // id + padding
};

layout (binding = 0) uniform RaytracingParamBlock
{
	Sphere spheres[3];
	Plane  planes[6];

	vec4 lightPos;  // lightPos + padding
	vec4 fogColor;
	vec4 cameraPos; // cameraPos + aspect
} uboParam;

// Lighting =========================================================

float LightDiffuse(vec3 normal, vec3 lightDir) 
{
	return clamp(dot(normal, lightDir), 0.0, 1.0);
}

float LightSpecular(vec3 normal, vec3 lightDir, float specularFactor)
{
	vec3 viewVec = normalize(uboParam.cameraPos.xyz);
	vec3 halfVec = normalize(lightDir + viewVec);
	return pow(clamp(dot(normal, halfVec), 0.0, 1.0), specularFactor);
}

// Sphere ===========================================================

float SphereIntersect(in vec3 rayO, in vec3 rayD, in Sphere sphere)
{
	vec3 oc = rayO - sphere.position.xyz;
	float b = 2.0 * dot(oc, rayD);
	float c = dot(oc, oc) - sphere.position.w * sphere.position.w;
	float h = b * b - 4.0 * c;

	if (h < 0.0) {
		return -1.0;
	}

	float t = (-b - sqrt(h)) / 2.0;
	return t;
}

vec3 SphereNormal(in vec3 pos, in Sphere sphere)
{
	return (pos - sphere.position.xyz) / sphere.position.w;
}

// Plane ===========================================================

float PlaneIntersect(vec3 rayO, vec3 rayD, Plane plane)
{
	float d = dot(rayD, plane.normal.xyz);

	if (d == 0.0) {
		return 0.0;
	}

	float t = -(plane.normal.w + dot(rayO, plane.normal.xyz)) / d;

	if (t < 0.0) {
		return 0.0;
	}
	return t;
}

// Scene ===========================================================

void ReflectRay(inout vec3 rayD, in vec3 normal)
{
	rayD = rayD + 2.0 * -dot(normal, rayD) * normal;
}

int Intersect(in vec3 rayO, in vec3 rayD, inout float resT)
{
	int id = -1;

	for (int i = 0; i < 3; i++)
	{
		float dist = SphereIntersect(rayO, rayD, uboParam.spheres[i]);
		if ((dist > EPSILON) && (dist < resT))
		{
			id   = uboParam.spheres[i].id.x;
			resT = dist;
		}
	}
	
	for (int i = 0; i < 6; i++)
	{
		float dist = PlaneIntersect(rayO, rayD, uboParam.planes[i]);
		if ((dist > EPSILON) && (dist < resT))
		{
			id   = uboParam.planes[i].id.x;
			resT = dist;
		}	
	}
	
	return id;
}

float CalcShadow(in vec3 rayO, in vec3 rayD, in int objectId, inout float t)
{
	for (int i = 0; i < 3; i++)
	{
		if (uboParam.spheres[i].id.x == objectId) {
			continue;
		}
		
		float dist = SphereIntersect(rayO, rayD, uboParam.spheres[i]);
		if ((dist > EPSILON) && (dist < t))
		{
			t = dist;
			return SHADOW;
		}
	}

	return 1.0;
}

vec3 CalcFog(in float t, in vec3 color)
{
	return mix(color, uboParam.fogColor.rgb, clamp(sqrt(t * t) / 20.0, 0.0, 1.0));
}

vec3 RenderScene(inout vec3 rayO, inout vec3 rayD, inout int id)
{
	vec3 color = vec3(0.0);
	float t = MAXLEN;

	// Get intersected object ID
	int objectID = Intersect(rayO, rayD, t);
	if (objectID == -1) {
		return color;
	}
	
	vec3 pos = rayO + t * rayD;
	vec3 lightVec = normalize(uboParam.lightPos.xyz - pos);				
	vec3 normal;
	
	// Planes
	for (int i = 0; i < 6; i++)
	{
		if (objectID == uboParam.planes[i].id.x)
		{
			normal = uboParam.planes[i].normal.xyz;
			float diffuse  = LightDiffuse(normal, lightVec);
			float specular = LightSpecular(normal, lightVec, uboParam.planes[i].diffuse.w);
			color = diffuse * uboParam.planes[i].diffuse.xyz + specular;	
		}
	}

	for (int i = 0; i < 3; i++)
	{
		if (objectID == uboParam.spheres[i].id.x)
		{
			normal = SphereNormal(pos, uboParam.spheres[i]);	
			float diffuse  = LightDiffuse(normal, lightVec);
			float specular = LightSpecular(normal, lightVec, uboParam.spheres[i].diffuse.w);
			color = diffuse * uboParam.spheres[i].diffuse.xyz + specular;	
		}
	}

	if (id == -1) {
		return color;
	}

	id = objectID;

	// Shadows
	t = length(uboParam.lightPos.xyz - pos);
	color *= CalcShadow(pos, lightVec, id, t);
	
	// Fog
	color = CalcFog(t, color);	
	
	// Reflect ray for next render pass
	ReflectRay(rayD, normal);
	rayO = pos;	
	
	return color;
}

// --------------------------------------------------------------

void main()
{	
	ivec2 dim = imageSize(outputImage);
	vec2 uv   = vec2(gl_GlobalInvocationID.xy) / dim;

	vec3 rayO = uboParam.cameraPos.xyz;
	vec3 rayD = normalize(vec3((-1.0 + 2.0 * uv) * vec2(uboParam.cameraPos.w, 1.0), 1.0)); // left hand, z-forward
	
	// Basic color path
	int id = 0;
	vec3 finalColor = RenderScene(rayO, rayD, id);
	
	// Reflection
#if REFLECTIONS
	float reflectionStrength = REFLECTIONSTRENGTH;
	for (int i = 0; i < RAYBOUNCES; i++)
	{
		vec3 reflectionColor = RenderScene(rayO, rayD, id);
		finalColor = (1.0 - reflectionStrength) * finalColor + reflectionStrength * mix(reflectionColor, finalColor, 1.0 - reflectionStrength);			
		reflectionStrength *= REFLECTIONFALLOFF;
	}
#endif
	
	imageStore(outputImage, ivec2(gl_GlobalInvocationID.xy), vec4(finalColor, 0.0));
}