#version 450

layout (local_size_x = 8, local_size_y = 8) in;

layout (binding = 0) uniform sampler2D texLowDepth;
layout (binding = 1) uniform sampler2D texHighDepth;
layout (binding = 2) uniform sampler2D texintervalDepth;
layout (binding = 3, r8) uniform image2D texOutAO;

layout (binding = 4) uniform AoParam 
{
	vec4 data0;
    vec4 data1;
} param;

shared float DepthCache[256];
shared float AOCache1[256];
shared float AOCache2[256];

vec2 InvLowResolution;
vec2 InvHighResolution;
float NoiseFilterStrength;
float StepSize;
float kBlurTolerance;
float kUpsampleTolerance;

void PrefetchData(uint index, vec2 uv)
{
    vec4 AO1 = textureGather(texintervalDepth, uv);
    AOCache1[index + 0]  = AO1.w;
    AOCache1[index + 1]  = AO1.z;
    AOCache1[index + 16] = AO1.x;
    AOCache1[index + 17] = AO1.y;

    vec4 ID = 1.0 / textureGather(texLowDepth, uv);
    DepthCache[index + 0]  = ID.w;
    DepthCache[index + 1]  = ID.z;
    DepthCache[index + 16] = ID.x;
    DepthCache[index + 17] = ID.y;
}

float SmartBlur( float a, float b, float c, float d, float e, bool Left, bool Middle, bool Right )
{
    b = (Left || Middle) ? b : c;
    a = Left ? a : b;
    d = (Right || Middle) ? d : c;
    e = Right ? e : d;
    return ((a + e) / 2.0 + b + c + d) / 4.0;
}

bool CompareDeltas( float d1, float d2, float l1, float l2 )
{
    float temp = d1 * d2 + StepSize;
    return temp * temp > l1 * l2 * kBlurTolerance;
}

void BlurHorizontally( uint leftMostIndex )
{
    float a0 = AOCache1[leftMostIndex + 0];
    float a1 = AOCache1[leftMostIndex + 1];
    float a2 = AOCache1[leftMostIndex + 2];
    float a3 = AOCache1[leftMostIndex + 3];
    float a4 = AOCache1[leftMostIndex + 4];
    float a5 = AOCache1[leftMostIndex + 5];
    float a6 = AOCache1[leftMostIndex + 6];

    float d0 = DepthCache[leftMostIndex + 0];
    float d1 = DepthCache[leftMostIndex + 1];
    float d2 = DepthCache[leftMostIndex + 2];
    float d3 = DepthCache[leftMostIndex + 3];
    float d4 = DepthCache[leftMostIndex + 4];
    float d5 = DepthCache[leftMostIndex + 5];
    float d6 = DepthCache[leftMostIndex + 6];

    float d01 = d1 - d0;
    float d12 = d2 - d1;
    float d23 = d3 - d2;
    float d34 = d4 - d3;
    float d45 = d5 - d4;
    float d56 = d6 - d5;

    float l01 = d01 * d01 + StepSize;
    float l12 = d12 * d12 + StepSize;
    float l23 = d23 * d23 + StepSize;
    float l34 = d34 * d34 + StepSize;
    float l45 = d45 * d45 + StepSize;
    float l56 = d56 * d56 + StepSize;

    bool c02 = CompareDeltas(d01, d12, l01, l12);
    bool c13 = CompareDeltas(d12, d23, l12, l23);
    bool c24 = CompareDeltas(d23, d34, l23, l34);
    bool c35 = CompareDeltas(d34, d45, l34, l45);
    bool c46 = CompareDeltas(d45, d56, l45, l56);

    AOCache2[leftMostIndex + 0] = SmartBlur(a0, a1, a2, a3, a4, c02, c13, c24);
    AOCache2[leftMostIndex + 1] = SmartBlur(a1, a2, a3, a4, a5, c13, c24, c35);
    AOCache2[leftMostIndex + 2] = SmartBlur(a2, a3, a4, a5, a6, c24, c35, c46);
}

void BlurVertically(uint topMostIndex)
{
    float a0 = AOCache2[topMostIndex + 0];
    float a1 = AOCache2[topMostIndex + 16];
    float a2 = AOCache2[topMostIndex + 32];
    float a3 = AOCache2[topMostIndex + 48];
    float a4 = AOCache2[topMostIndex + 64];
    float a5 = AOCache2[topMostIndex + 80];

    float d0 = DepthCache[topMostIndex + 2];
    float d1 = DepthCache[topMostIndex + 18];
    float d2 = DepthCache[topMostIndex + 34];
    float d3 = DepthCache[topMostIndex + 50];
    float d4 = DepthCache[topMostIndex + 66];
    float d5 = DepthCache[topMostIndex + 82];

    float d01 = d1 - d0;
    float d12 = d2 - d1;
    float d23 = d3 - d2;
    float d34 = d4 - d3;
    float d45 = d5 - d4;

    float l01 = d01 * d01 + StepSize;
    float l12 = d12 * d12 + StepSize;
    float l23 = d23 * d23 + StepSize;
    float l34 = d34 * d34 + StepSize;
    float l45 = d45 * d45 + StepSize;

    bool c02 = CompareDeltas(d01, d12, l01, l12);
    bool c13 = CompareDeltas(d12, d23, l12, l23);
    bool c24 = CompareDeltas(d23, d34, l23, l34);
    bool c35 = CompareDeltas(d34, d45, l34, l45);

    float aoResult1 = SmartBlur(a0, a1, a2, a3, a4, c02, c13, c24);
    float aoResult2 = SmartBlur(a1, a2, a3, a4, a5, c13, c24, c35);

    AOCache1[topMostIndex + 0]  = aoResult1;
    AOCache1[topMostIndex + 16] = aoResult2;
}

float BilateralUpsample(float HiDepth, float HiAO, vec4 LowDepths, vec4 LowAO)
{
    vec4 weights = vec4(9, 3, 1, 3) / (abs(HiDepth - LowDepths) + kUpsampleTolerance);
    float TotalWeight = dot(weights, vec4(1)) + NoiseFilterStrength;
    float WeightedSum = dot(LowAO, weights) + NoiseFilterStrength;
    return HiAO * WeightedSum / TotalWeight;
}

void main()
{
    InvLowResolution    = param.data0.xy;
    InvHighResolution   = param.data0.zw;
    NoiseFilterStrength = param.data1.x;
    StepSize            = param.data1.y;
    kBlurTolerance      = param.data1.z;
    kUpsampleTolerance  = param.data1.w;

    PrefetchData(gl_LocalInvocationID.x << 1 | gl_LocalInvocationID.y << 5, ivec2(gl_GlobalInvocationID.xy + gl_LocalInvocationID.xy - 2) * InvLowResolution);
    
    groupMemoryBarrier();
    barrier();

    if (gl_LocalInvocationIndex < 39) {
        BlurHorizontally((gl_LocalInvocationIndex / 3) * 16 + (gl_LocalInvocationIndex % 3) * 3);
    }
        
    groupMemoryBarrier();
    barrier();

    if (gl_LocalInvocationIndex < 45) {
        BlurVertically((gl_LocalInvocationIndex / 9) * 32 + gl_LocalInvocationIndex % 9);
    }
        
    groupMemoryBarrier();
    barrier();
    
    uint Idx0    = gl_LocalInvocationID.x + gl_LocalInvocationID.y * 16;
    vec4 LoSSAOs = vec4(AOCache1[Idx0 + 16], AOCache1[Idx0 + 17], AOCache1[Idx0 + 1], AOCache1[Idx0]);
    
    vec2 UV0 = gl_GlobalInvocationID.xy * InvLowResolution;
    vec2 UV1 = gl_GlobalInvocationID.xy * 2 * InvHighResolution;

	vec4 HiSSAOs  = vec4(1.0);
    vec4 LoDepths = textureGather(texLowDepth, UV0);
    vec4 HiDepths = textureGather(texHighDepth, UV1);

    ivec2 outUV = ivec2(gl_GlobalInvocationID.xy << 1);
    imageStore(texOutAO, outUV + ivec2(-1,  0), vec4(BilateralUpsample(HiDepths.x, HiSSAOs.x, LoDepths.xyzw, LoSSAOs.xyzw)));
    imageStore(texOutAO, outUV + ivec2( 0,  0), vec4(BilateralUpsample(HiDepths.y, HiSSAOs.y, LoDepths.yzwx, LoSSAOs.yzwx)));
    imageStore(texOutAO, outUV + ivec2( 0, -1), vec4(BilateralUpsample(HiDepths.z, HiSSAOs.z, LoDepths.zwxy, LoSSAOs.zwxy)));
    imageStore(texOutAO, outUV + ivec2(-1, -1), vec4(BilateralUpsample(HiDepths.w, HiSSAOs.w, LoDepths.wxyz, LoSSAOs.wxyz)));
}